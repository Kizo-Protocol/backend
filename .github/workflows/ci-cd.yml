name: 'Backend CI/CD Pipeline'

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  RUST_VERSION: "stable"
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true
  
jobs:
  pre-checks:
    name: 'Pre-flight Checks'
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-branch.outputs.should-deploy }}
      git-sha: ${{ steps.vars.outputs.git-sha }}
      timestamp: ${{ steps.vars.outputs.timestamp }}
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '[INFO] : Set pipeline variables'
        id: vars
        run: |
          echo "[INFO] : Setting pipeline variables"
          echo "git-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "[INFO] : Git SHA: $(git rev-parse --short HEAD)"
          echo "[INFO] : Timestamp: $(date -u +%Y%m%d-%H%M%S)"

      - name: '[INFO] : Check deployment eligibility'
        id: check-branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "[INFO] : Branch eligible for deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "[INFO] : Branch not eligible for deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build-test:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Setup Rust toolchain'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: '[INFO] : Setup Rust cache'
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: '[INFO] : Format code'
        run: |
          echo "[INFO] : Running cargo fmt"
          cargo fmt --all
          echo "[INFO] : Code formatting completed"

      - name: '[INFO] : Run Clippy linting'
        run: |
          echo "[INFO] : Running Clippy linting"
          cargo clippy --all-targets --all-features -- -D warnings || {
            echo "[WARN] : Clippy linting had warnings"
            cargo clippy --all-targets --all-features
          }
          echo "[INFO] : Clippy completed"

      - name: '[INFO] : Build project'
        run: |
          echo "[INFO] : Building backend project"
          cargo build --verbose
          echo "[INFO] : Build completed successfully"

      - name: '[INFO] : Upload build artifacts'
        if: success() && needs.pre-checks.outputs.should-deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ needs.pre-checks.outputs.git-sha }}
          path: |
            target/debug/kizo-server
            Cargo.toml
            Cargo.lock
          retention-days: 7

  deploy:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [pre-checks, build-test]
    if: needs.pre-checks.outputs.should-deploy == 'true'
    environment:
      name: production
      url: 'https://your-backend-domain.com'
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Validate deployment secrets'
        run: |
          echo "[INFO] : Validating required secrets"
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then
            echo "[FATAL] : VPS_HOST secret is missing"
            exit 1
          fi
          echo "[INFO] : All required secrets are present"

      - name: '[INFO] : Deploy to VPS'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          command_timeout: 20m
          script: |
            set -e
            
            echo "[INFO] : Starting backend deployment"
            echo "[INFO] : Git SHA: ${{ needs.pre-checks.outputs.git-sha }}"
            
            cd /home/kizovps/kizo/backend || {
              echo "[FATAL] : Cannot access backend directory"
              exit 1
            }
            
            echo "[INFO] : Pulling latest changes"
            git fetch origin && git reset --hard origin/master
            
            echo "[INFO] : Building Docker image"
            sudo docker build -t kizo-backend:latest .
            
            echo "[INFO] : Stopping old container"
            sudo docker stop kizo-backend 2>/dev/null || true
            sudo docker rm kizo-backend 2>/dev/null || true
            
            echo "[INFO] : Starting new container"
            sudo docker run -d \
              --name kizo-backend \
              --network host \
              --restart unless-stopped \
              --env-file /home/kizovps/kizo/.env \
              kizo-backend:latest
            
            echo "[INFO] : Verifying deployment"
            sleep 10
            if sudo docker ps | grep -q kizo-backend; then
              echo "[INFO] : Backend deployment successful"
            else
              echo "[ERROR] : Backend deployment failed"
              exit 1
            fi

  cleanup:
    name: 'Cleanup'
    runs-on: ubuntu-latest
    needs: [pre-checks, deploy]
    if: always()
    steps:
      - name: '[INFO] : Pipeline cleanup'
        run: |
          echo "[INFO] : Backend pipeline completed"
          echo "[INFO] : Status: ${{ needs.deploy.result || 'skipped' }}"
